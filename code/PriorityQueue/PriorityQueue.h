#pragma once

#include <iostream>
#include <string>

using namespace std;

// структура узел, отвечающая за хранение элементов очереди. Содержит значение и приоритет элемента, ссылку на предыдущий и следующий узел
struct Node_qp {
	int val, priority;
	Node_qp* pre;
	Node_qp* next;
	Node_qp(int v, int prior) : val(v), priority(prior), pre(NULL), next(NULL) {}
};

// класс для структуры данных очередь с приоритетом
class PriorityQueue {
private:
	Node_qp* first;
	Node_qp* last;
	// максимальный и текущий размер очереди
	unsigned int max_size = 10000, size = 0;
public:
	// если очередь не пуста, возвращает последний элемент, иначе сообщает о том, что очередь пуста
	string top();

	// добавляет элемент в очередь. Мы создаем новый узел с переданным значением и приоритетом. Если приоритет не указан,
	// то принимаем его за равный значению элемента. После создания узла, вставляем его в соответствии с порядком приоритета.
	string push(int num, int prior);

	string push(int num);

	// если очередь пуста, сообщаем об этом, иначе удаляем элемент путем переназначения в last предшествующего элемента.
	string pop();

	// проверка очереди на пустоту. Если в первом элементе пустота, то очередь пуста
	bool empty();

	// конструктор создающий очередь с приоритетом заданной длины (но пустую по значениям)
	PriorityQueue(unsigned int m_size);
	PriorityQueue();
};
